// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//defines generator, we can have multiple generators
generator client {
  provider = "prisma-client-js"
}

//defines the data source I am using
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//defines models and enums
//represents the tables inside your db, where you can store your data
// each field in a model have 4 parts, the name and type is compulsory
// eg email String,  optionally you can have a field modifier and you can have attributes
model User {
  id            String  @id @default(uuid())
  name          String
  email         String
  age           Int
  role          Role    @default(BASIC)
  largeNumber   BigInt?
  preferences   Json?
  blob          Bytes?
  writtenPosts  Post[]  @relation("WrittenPosts")
  favoritePosts Post[]  @relation("FavoritePosts")
  // they are two field type modifiers, ? optional and [] 

  userPreference   UserPreferences? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?        @unique

  //we have field level attributes and block level attributes

  //this is a block level attribute, uniqueness constraint on age and name
  //two user cannot have the same age and name
 // @@unique([age, name])
  //@@index([email])
}

model Post {
  id            Int        @id @default(autoincrement())
  title         String
  averageRating Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("WrittenPosts", fields: [authorID], references: [id])
  //authorID is the same as ID
  authorID      String
  favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedByID], references: [id])
  //authorID is the same as ID
  favoritedByID String?
  categories    Category[]

  //this means instead of using a unique ID, title and authorID will represent the ID
  //@@id ([title, authorID])
}

model UserPreferences {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?

  //userId must be unique because we can only have preference reference one user
}

//schema file defines your entire database, allows you to migrate your database,
//and allows you to interact with your database
model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  BASIC
  EDITOR
  ADMIN
}
